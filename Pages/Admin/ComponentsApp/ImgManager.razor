@inject ILogger<FileUpload> Logger
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Processing
@inject IPopupNotification popupNotification




@if (displayImgManager)
{
	<div class="modal d-block" tabindex="-1" role="dialog" id="imgManagerModal">
	<div class="modal-dialog modal-fullscreen" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="staticBackdropLabel">Modal title</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" @onclick="OnCancel"
					aria-label="Close"></button>
			</div>
			<button type="button" class="btn btn-primary"
				@onclick="@(e => ShowFiles(@PathFolder + @FolderName + "/"))">Выбрать изображение(я)</button>
			<div class="files-manager__wrapper">
				@if (pathDirectory.Count() > 0)
					{
						foreach (var dir in pathDirectory)
						{
							<div class="card">
								<img class="" src="/imegs/system-img/folder.svg" />
								<p>wwwroot/@PathFolder@FolderName/@dir.Name</p>
							</div>
						}
					}
					@if (pathFiles.Count() > 0)
					{
						@foreach (FileInfo file in pathFiles)
						{

							<div class="card">
								<img class="" src="@fullPathFile/@file.Name" />
								<p>wwwroot/@PathFolder@FolderName/@file.Name</p>
								<button type="button" class="btn btn-success"
						@onclick="@(e => AddPhoto('/' + @PathFolder + @FolderName + "/webp/" + @Path.GetFileNameWithoutExtension(file.Name) + ".webp"))">
									Добавить</button>
								<button type="button" class="btn btn-danger"
						@onclick="@(e => DeleteFile("wwwroot/" + @PathFolder + @FolderName + '/', @file))">
									Удалить на всегда</button>
								@* <button type="button" class="btn btn-success"
					@onclick="@(e => ResizePhoto("wwwroot/" + @PathFolder + @FolderName + '/', @file.Name))">
					Ресайз</button> *@
							</div>
						}
					}
				</div>
				<FileUpload FolderName="@FolderName" UrlPath="@PathFolder" />
			</div>
		</div>
	</div>
}

@code {
	private bool displayImgManager = false;

	[Parameter]
	public EventCallback OnCancel { get; set; }
	public void Show() => displayImgManager = true;
	public void Hide() => displayImgManager = false;

	[Parameter]
	public string PathFolder { get; set; } = string.Empty;

	[Parameter]
	public string FolderName { get; set; } = string.Empty;

	[Parameter]
	public EventCallback<string> OnClickAddPhoto { get; set; }

	[Parameter]
	public EventCallback<string> OnClickDeletePhoto { get; set; }

	[Parameter]
	public bool IsSlider { get; set; }

	private string fullPathFile = string.Empty;
	private List<FileInfo> pathFiles = new();
	private List<DirectoryInfo> pathDirectory = new();

	private async Task ShowFiles(string path)
	{
		fullPathFile = path;
		var directory = new DirectoryInfo("wwwroot/" + path);

		await Task.Run(() => pathFiles = GetFiles(directory));
		await Task.Run(() => pathDirectory = GetDirectories(directory));
	}

	private List<FileInfo> GetFiles(DirectoryInfo dir)
	{
		return dir.GetFiles().ToList();
	}
	private List<DirectoryInfo> GetDirectories(DirectoryInfo dir)
	{
		return dir.GetDirectories().ToList();
	}

	public Task AddPhoto(string url)
	{
		return OnClickAddPhoto.InvokeAsync(url);
	}

	private List<string> urlPhotos { get; set; } = new();
	private Task DeletePhoto(string url)
	{
		if (url != string.Empty)
		{
			urlPhotos = url.Split(", ").ToList();
			urlPhotos.Remove(url);
			url = String.Join(", ", urlPhotos);

			return OnClickDeletePhoto.InvokeAsync(url);
		}
		return OnClickDeletePhoto.InvokeAsync(url);
	}

	private string fileNameError = string.Empty;
	private async Task DeleteFile(string urlPath, FileInfo file)
	{
		if (File.Exists(urlPath + file.Name))
		{
			try
			{
				var photoName = Path.GetFileNameWithoutExtension(file.Name);
				string[] arrDeleteFiles = { urlPath + file.Name, urlPath + "webp/" + photoName + ".webp", urlPath + "average/" + file.Name, 
					urlPath + "average/webp/" + photoName + ".webp"};

				foreach (string path in arrDeleteFiles)
				{
					File.Delete(path);
				}
				var directory = new DirectoryInfo(urlPath);
				await Task.Run(() => pathFiles = GetFiles(directory));
				await Task.Run(() => pathDirectory = GetDirectories(directory));
			}
			catch (Exception ex)
			{
				Logger.LogError("File: {Filename} Error: {Error}",
				urlPath, ex.Message);
				System.Console.WriteLine("удаление фото " + ex.Message);
			}
		}
		else
		{
			fileNameError = "Указанный файл не существует";
		}
	}
}