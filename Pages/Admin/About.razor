@page "/admin/about"
@using LampStore.Models.AboutPages
@inherits OwningComponentBase<IAboutPageRepository>
@inject IPopupNotification popupNotification
@inject IFolderManager folderManager

<Confirmation @ref="confirmation" OnCancel="OnCancel" OnConfirm="OnConfirm" IsConfirm="true"
	Title="Удаление страницы о компании...">
	<div class="toast-body">
		Вы уверены что хотите удалить запись
		@if (AboutPageToBeDelete != null)
		{
			<p>@AboutPageToBeDelete.Heading ?</p>
		}
	</div>
</Confirmation>
<div class="admin-notification__wrapper">
	<Popup ListNotifications="popupNotification.ListNotifications"/>
</div>

@if (loading)
{
	<div class="lds-spinner">
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
	<div></div>
</div>
}
else
{
	<table class="table table-sm table-striped table-bordered">
	<thead>
		<tr>
			<th>ID</th>
			<th>Заголовок</th>
			<th>Изображение</th>
			<th>Описание страницы</th>
			<th>Показывать на главной</th>
			<th>Опубликована</th>
			<th>Главная страница о компании</th>
			<td />
		</tr>
	</thead>
	<tbody>
		@if (AboutPageData?.Count() > 0)
			{
				@foreach (AboutPage a in AboutPageData)
				{
					<tr>
						<td>@a.Id</td>
						<td>@a.Heading</td>
						<td><img class="img-fluid" style="height: 80px;" src=@a.ImgOneUrl alt=""></td>
						<td>@a.Paragraph</td>
						<td>@a.DisplayHomePage</td>
						<td>@a.IsPublished</td>
						<td>@a.MainAboutCompany</td>
						<td class="text-center">
							<NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(a.Id)">
								Изменить
							</NavLink>
							<button class="btn btn-danger btn-sm" @onclick="@(e => DeleteAboutPage(a))">
								Удалить
							</button>
						</td>
					</tr>
				}
			}
			else
			{
				<tr>
					<td colspan="5" class="text-center">Записи, не найдены.</td>
				</tr>
			}
		</tbody>
	</table>
}
<NavLink class="btn btn-primary" href="/admin/about/create">Добавить</NavLink>

@code {
	private IAboutPageRepository Repository => Service;
	private IEnumerable<AboutPage> AboutPageData { get; set; } = Enumerable.Empty<AboutPage>();
	private bool loading = false;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			loading = true;
			await UpdateDataAsync();
			loading = false;
		}
		catch (InvalidOperationException ex)
		{
			Console.WriteLine("Исключение InvalidOperationException About: " + ex.Message);
			loading = true;
			await UpdateDataAsync();
			loading = false;
		}
	}

	private async Task UpdateDataAsync()
	{
		AboutPageData = await Repository.AboutPages.ToListAsync();
	}
	
	private Confirmation confirmation = null!;
	private AboutPage? AboutPageToBeDelete { get; set; }

	private void DeleteAboutPage(AboutPage aboutPage)
	{
		AboutPageToBeDelete = aboutPage;
		confirmation?.Show();
	}

	private string GetEditUrl(long id) => $"/admin/about/edit/{id}";
}

@code {

	private const string UrlPath = "wwwroot/imegs/img-about/";
	
	private async Task OnConfirm()
	{
		if (AboutPageToBeDelete != null)
		{
			folderManager.DeleteDirectory(UrlPath + AboutPageToBeDelete.Id);
			await Repository.DeleteAboutPageAsync(AboutPageToBeDelete);
			confirmation.Hide();
			popupNotification.CreateNotification( "Удаление записи", "Удалена страницы о компании", AboutPageToBeDelete.Heading);
			AboutPageToBeDelete = null;
			await UpdateDataAsync();
		}
	}

	private void OnCancel()
	{
		confirmation?.Hide();
		popupNotification.CreateNotification( "Отмена удаления", "Отменено удаление страницы о компании", AboutPageToBeDelete!.Heading);
		AboutPageToBeDelete = null;
	}
}