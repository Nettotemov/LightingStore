@using System.Globalization

<table class="table table-sm table-striped table-bordered">
	<thead>
		<tr class="@StyleTable">
			<th colspan="14" class="text-center text-white">@TableTitle</th>
		</tr>
		<tr>
			<th class="text-center">№</th>
			<th class="text-center" @onclick="@(e => SortOrders(SortedDate))">Дата
				<input value="@InputDateTimeValue"
					@onchange="@((ChangeEventArgs __e) => InputDateTimeValue = Convert.ToDateTime(__e.Value))"
					@onblur="@(e => SortOrders())" />
			</th>
			<th class="text-center">Имя
				<input value="@InputNameValue"
					@onchange="@((ChangeEventArgs __e) => InputNameValue = __e.Value?.ToString())"
					@onblur="@(e => SortOrders())" />
			</th>
			<th class="text-center">Телефон
				<input value="@InputTelValue"
					@onchange="@((ChangeEventArgs __e) => InputTelValue = __e.Value?.ToString())"
					@onblur="@(e => SortOrders())" />
			</th>
			<th class="text-center">Email
				<input value="@InputEmailValue"
					@onchange="@((ChangeEventArgs __e) => InputEmailValue = __e.Value?.ToString())"
					@onblur="@(e => SortOrders())" />
			</th>
			<th class="text-center">Индекс</th>
			<th class="text-center">Город
				<input value="@InputCityValue"
					@onchange="@((ChangeEventArgs __e) => InputCityValue = __e.Value?.ToString())"
					@onblur="@(e => SortOrders())" />
			</th>
			<th class="text-center">Статус заказа
				<select @onchange="@((ChangeEventArgs __e) => InputStatusOrderValue = __e.Value?.ToString())"
					@onmouseout="@(e => SortOrders())" class="form-select">
					<option value="">Все</option>
					@foreach (var status in Enum.GetValues<StatusOrder>())
					{
						<option value="@status">@EnumExtensions.GetDisplayName(status)</option>
					}
				</select>
			</th>
			<th class="text-center">Сумма заказа</th>
			<th colspan="3" class="text-center">Информация о заказе</th>
			<th class="text-center">Редактировать</th>
			<th class="text-center">Выполнение</th>
		</tr>
	</thead>
	<tbody>
		@if (Orders?.Count() > 0)
		{
			@foreach (Order o in Orders)
			{
				<tr>
					<td class="text-center">@o.OrderID</td>
					<td class="text-center">@o.DateAdded</td>
					<td class="text-center">@o.Name</td>
					<td class="text-center">@o.Phone</td>
					<td class="text-center">@o.Email</td>
					<td class="text-center">@o.Zip</td>
					<td class="text-center">@o.City</td>
					<td class="text-center">@EnumExtensions.GetDisplayName(@o.StatusOrders)</td>
					<td class="text-center">@o.Lines.Select(p => p).Sum(e => (e.Product.Price * e.Quantity)).ToString("C0", new CultureInfo("ru-RU"))</td>
					<th class="text-center">Продукты</th>
					<th class="text-center">Количество</th>
					<th class="text-center">Цена товара</th>
					<td class="text-center">
						<NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(o.OrderID)">
							Изменить
						</NavLink>
						<NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(o.OrderID)">
							Подробнее
						</NavLink>
					</td>
					<td class="text-center">
						<button class="btn btn-sm btn-danger" @onclick="@(e => OrderSelected.InvokeAsync(o.OrderID))">
							@ButtonLabel
						</button>
					</td>
				</tr>
				@foreach (CartLine line in o.Lines)
				{
					<tr>
						<td colspan="9"></td>
						<td class="text-center">@line.Product.Name</td>
						<td class="text-center">@line.Quantity</td>
						<td class="text-center">@line.Product.Price.ToString("C", new CultureInfo("ru-RU"))</td>
						<td></td>
					</tr>
				}
			}
		}
		else
		{
			<tr>
				<td colspan="11" class="text-center">Нет заказов</td>
			</tr>
		}
	</tbody>
</table>

@code
{
	[Parameter]
	public string TableTitle { get; set; } = "Orders";

	[Parameter]
	public IEnumerable<Order> Orders { get; set; } = Enumerable.Empty<Order>();

	[Parameter]
	public string ButtonLabel { get; set; } = "Выполнен";

	[Parameter]
	public EventCallback<int> OrderSelected { get; set; }

	[Parameter]
	public string StyleTable { get; set; } = "bg-danger";

	public string GetEditUrl(long id) => $"/admin/orders/edit/{id}";
	public string GetDetailsUrl(long id) => $"/admin/orders/details/{id}";

	[Parameter]
	public IEnumerable<Order> GetOrders { get; set; } = Enumerable.Empty<Order>();

	public bool SortedDate { get; set; } = false;
	public string InputTelValue { get; set; } = "";
	public string InputNameValue { get; set; } = "";
	public string InputEmailValue { get; set; } = "";
	public string InputCityValue { get; set; } = "";
	public string InputStatusOrderValue { get; set; } = "";
	public DateTime InputDateTimeValue { get; set; }

	public void SortOrders(bool b)
	{
		if (b == false)
		{
			Orders = Orders.OrderBy(o => o.DateAdded).ToList();
			SortedDate = true;
		}
		else
		{
			Orders = Orders.OrderByDescending(o => o.DateAdded).ToList();
			SortedDate = false;
		}
	}
	public void SortOrders()
	{

		Orders = GetOrders;

		if (InputNameValue != string.Empty)
		{
			Orders = Orders.Where(o => o.Name!.ToLower().StartsWith(InputNameValue.ToLower())).ToList();
		}
		if (InputTelValue != string.Empty)
		{
			Orders = Orders.Where(o => o.Phone!.Contains(InputTelValue)).ToList();
		}
		if (InputEmailValue != string.Empty)
		{
			Orders = Orders.Where(o => o.Email!.ToLower().StartsWith(InputEmailValue.ToLower())).ToList();
		}
		if (InputCityValue != string.Empty)
		{
			Orders = Orders.Where(o => o.Email!.ToLower().StartsWith(InputCityValue.ToLower())).ToList();
		}
		if (InputStatusOrderValue != string.Empty)
		{
			Orders = Orders.Where(o => o.StatusOrders.ToString() == InputStatusOrderValue).ToList();
		}
		if (InputDateTimeValue != null)
		{
			Orders = Orders.Where(o => o.DateAdded.Day == InputDateTimeValue.Day).ToList();
		}
	}
}