@page "/admin/confident-police/edit/{id:long}"
@page "/admin/confident-police/create"
@inherits OwningComponentBase<IConfidentPolicyRepository>
@inject IPopupNotification popupNotification

<h3 class="bg-@ThemeColor text-white text-center p-1">@TitleText о компании</h3>
<h1 class="">Свойства</h1>
<EditForm Model="ConfidentPolicyNode" OnValidSubmit="SaveConfidentPolicyNode" id="saveConfidentPolicyNode">
	<DataAnnotationsValidator />
	<div class="row row-cols-2">
		<div class="col">
			@if (ConfidentPolicyNode.ID != 0)
			{
				<div class="form-group mb-4">
					<label>ID</label>
					<input class="form-control" disabled value="@ConfidentPolicyNode.ID" />
				</div>
			}
			<div class="form-group mb-4">
				<label>Название</label>
				<ValidationMessage For="@(() => ConfidentPolicyNode.Name)" />
				<InputText class="form-control" @bind-Value="ConfidentPolicyNode.Name" />
			</div>
			<div class="form-group mb-4">
				<label>Описание</label>
				<TextEditor @ref="textEditor" @bind-ChildName="ConfidentPolicyNode.Value" />
				<InputTextArea class="form-control" disabled @bind-Value="ConfidentPolicyNode.Value" />
			</div>
		</div>
	</div>
</EditForm>
<div class="mt-2">
	<button form="saveConfidentPolicyNode" type="submit" class="btn btn-@ThemeColor">Сохранить</button>
	<NavLink class="btn btn-secondary" href="/admin/cooperation">Отмена</NavLink>
</div>

@code {

	public IConfidentPolicyRepository Repository => Service;

	[Inject]
	public NavigationManager? NavManager { get; set; }

	[Parameter]
	public long Id { get; set; } = 0;
	public ConfidentPolicy ConfidentPolicyNode { get; set; } = new ConfidentPolicy();

	protected override void OnParametersSet()
	{
		if (Id != 0)
		{
			ConfidentPolicyNode = Repository.ConfidentPolicys.FirstOrDefault(с => с.ID == Id) ?? new();
		}
	}

	TextEditor? textEditor;
	public async Task SaveConfidentPolicyNode()
	{
		if (Id == 0)
		{
			await textEditor!.SaveContent();
			Repository.CreatePolicy(ConfidentPolicyNode);
			if (ConfidentPolicyNode.ID != 0)
			{
				NavManager?.NavigateTo("/admin/confident-police");
				Notification notification = new Notification(1, "Запись сохранена", "Запись политики и конфиденциальности добавлена", ConfidentPolicyNode.Name);
				popupNotification.AddItem(notification);
				StateHasChanged();
			}
		}
		else
		{
			await textEditor!.SaveContent();
			Repository.SavePolicy(ConfidentPolicyNode);
			Notification notification = new Notification(1, "Изменения сохранены", "Запись отредактирована: Запись политики и конфиденциальности под номером", Id.ToString());
			popupNotification.AddItem(notification);
			NavManager?.NavigateTo("/admin/confident-police");
		}
	}
	public string ThemeColor => Id == 0 ? "primary" : "warning";
	public string TitleText => Id == 0 ? "Создание" : "Редактирование";
}
